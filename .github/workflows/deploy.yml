 name: Build and Deploy Spring Boot Application

 on:
   push:
     branches:
       - master  # main 브랜치에 push가 발생하면 실행

 jobs:
   build-and-deploy:
     runs-on: ubuntu-latest

     steps:
       # 1. 코드 체크아웃
       - name: Check out code
         uses: actions/checkout@v2

       # 2. JDK 17 설치
       - name: Set up JDK 17
         uses: actions/setup-java@v3
         with:
           java-version: '17'
           distribution: 'temurin'

       # 3. Gradle 빌드 (테스트 코드 실행 제외)
       - name: Grant execute permission to gradlew
         run: chmod +x ./gradlew  # gradlew에 실행 권한 추가

       - name: Build with Gradle
         run: ./gradlew build -x test

       # 4. .env 파일 생성
       - name: Generate .env file
         run: |
           echo "DB_URL=${{ secrets.DB_URL }}" > .env
           echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
           echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
           echo "IMP_CODE=${{ secrets.IMP_CODE }}" >> .env
           echo "IMP_API_KEY=${{ secrets.IMP_API_KEY }}" >> .env
           echo "IMP_API_SECRET_KEY=${{ secrets.IMP_API_SECRET_KEY }}" >> .env
           echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
           echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
           echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env
           echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
           echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
           echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
           echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
           echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
           echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
           echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
           echo "NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}" >> .env
           echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
           echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
           echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env
           echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
           echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
           echo "FILE_PATH=${{ secrets.FILE_PATH }}" >> .env
           echo "APP_BASE_URL=${{ secrets.APP_BASE_URL }}" >> .env
           echo "AWS_DEFAULT_REGION=us-east-1" >> .env

       # 5. EC2로 빌드 파일 및 .env 파일 전송
       - name: Deploy to EC2
         env:
           EC2_HOST: ${{ secrets.EC2_HOST }}                      # EC2 인스턴스의 퍼블릭 IP
           EC2_USER: ${{ secrets.EC2_USER }}                      # EC2 사용자명 (예: ec2-user)
           APP_DIR: ${{ secrets.APP_DIR }}                        # EC2에서 앱을 배포할 디렉토리 (예: /home/ec2-user/app)
         run: |
           # SSH 설정
           mkdir -p /home/runner/.ssh  # 디렉토리 생성
           chmod 700 ~/.ssh  # 적절한 권한 설정
           echo "${{ secrets.EC2_SSH_KEY }}" > /home/runner/.ssh/id_rsa
           chmod 600 /home/runner/.ssh/id_rsa  # 개인 키 파일 권한 설정

           # EC2에 빌드 파일 전송
           scp -o StrictHostKeyChecking=no build/libs/Modakbul-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.APP_DIR }}/app.jar

           # EC2에 .env 파일 전송
           scp -o StrictHostKeyChecking=no .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.APP_DIR }}/.env

           # EC2에서 애플리케이션 실행
           ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
           # 현재 실행 중인 애플리케이션 중지 (예: 기존 프로세스 종료)
           pkill -f 'app.jar' || true

           # .env 파일을 읽고 애플리케이션 실행
           export $(cat /home/ubuntu/app/.env | xargs) # 환경 변수 로드
           nohup java -jar /home/ubuntu/app/app.jar > /home/ubuntu/app/app.log 2>&1 &
           exit 0

           EOF
